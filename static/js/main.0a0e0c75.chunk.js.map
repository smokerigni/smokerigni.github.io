{"version":3,"sources":["components/ContactCodeBlock/ContactCodeBlock.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["CodeCursorComponent","className","ResetButton","handleReset","onClick","event","preventDefault","contactReasons","Object","freeze","JOB","FREELANCE","HELLO","animatedTextHello","animatedTextOther","ContactCodeBlock","animationHandlerInterval","useState","reason","setReason","typed","setTyped","handleReasonSelect","clearInterval","currentTarget","innerHTML","useEffect","console","log","i","setInterval","length","substring","Fragment","href","target","renderAnswer","entries","map","key","value","App","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAGMA,EAAsB,kBAC1B,sBAAMC,UAAU,cAAhB,gBAGIC,EAAc,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,YAKrB,OAAO,sBAAMF,UAAU,gBAAgBG,QAJb,SAACC,GACzBA,EAAMC,iBACNH,KAEK,mCAGHI,EAAiBC,OAAOC,OAAO,CACnCC,IAAK,OACLC,UAAW,wBACXC,MAAO,0DAGHC,EAA4B,qDAC5BC,EAA4B,iEAuGnBC,EArGmC,WAChD,IAcIC,EAdJ,EAA8BC,mBAAiB,IAA/C,mBAAQC,EAAR,KAAgBC,EAAhB,KACA,EAA4BF,mBAAiB,IAA7C,mBAAQG,EAAR,KAAeC,EAAf,KAEMC,EAAqB,SAACjB,GAC1BA,EAAMC,iBACNe,EAASH,IAAWX,EAAeK,MAC/BC,EACAC,GACJS,cAAcP,GACdG,EAAUd,EAAMmB,cAAcC,YAOhCC,qBAAU,WAER,GADAC,QAAQC,IAAI,kBACG,KAAXV,EAAe,CACjBG,EAAS,IACT,IAAIQ,EAAI,EACRb,EAA2Bc,aAAY,WACjCD,EAAIf,EAAkBiB,QACxBJ,QAAQC,IAAI,uBAAwBd,EAAkBkB,UAAU,EAAGH,EAAI,IACvER,EAASP,EAAkBkB,UAAU,EAAGH,EAAI,IAC5CA,MAEAF,QAAQC,IAAI,SACZL,cAAcP,MAEf,SAGHK,EAASH,IAAWX,EAAeK,MAC/BC,EACAC,GAEN,OAAO,kBAAMS,cAAcP,MAC1B,CAAEE,IAgCL,OACE,sBAAKjB,UAAU,kCAAf,UACE,8CACA,sBAAKA,UAAU,kBAAf,+BACoB,uBADpB,iDAEgD,uBAC9C,uBAHF,YAIW,IAJX,yCAIkD,+BAAOmB,IAC3C,KAAXF,EAAgB,cAAC,EAAD,IAA0BA,IAAWX,EAAeK,MAAQM,EAAS,GALxF,IAjCiB,WACnB,OAAQA,GACN,KAAKX,EAAeG,IAClB,OACE,eAAC,IAAMuB,SAAP,WACE,uBACC,IAFH,0BAE8B,mBAAGC,KAAM,0CACNC,OAAQ,SADX,sBAF9B,OAMJ,KAAK5B,EAAeI,UAClB,OACE,eAAC,IAAMsB,SAAP,WACE,uBACC,IAFH,0BAE8B,mBAAGC,KAAM,8BAAT,mBAF9B,OAKJ,KAAK3B,EAAeK,MAClB,OACE,eAAC,IAAMqB,SAAP,WACE,uBACC,IAFH,yDAKJ,QACE,OAAO,cAAC,IAAMA,SAAP,KAcNG,GACD,uBAAK,uBACO,KAAXlB,EAEG,qBAAKjB,UAAU,SAAf,SACGO,OACE6B,QAAQ9B,GACR+B,KAAI,WAAiBT,GAAjB,uBAAGU,EAAH,KAAQC,EAAR,YACH,sBACEvC,UAAU,gBAEVG,QAASkB,EAHX,SAGgCkB,GADzBD,QAIb,cAAC,EAAD,CAAapC,YAjFG,kBAAMgB,EAAU,cCV7BsB,EAvBsB,WACnC,OACE,sBAAKxC,UAAU,kBAAf,UACE,qBAAKA,UAAU,sDAAf,SACE,sBAAKA,UAAU,QAAf,UACE,wCACA,iRAKA,qBAAKA,UAAU,gBAAgByC,IAAI,6CAGvC,qBAAKzC,UAAU,sDAAf,SACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,YCRK0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0a0e0c75.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './ContactCodeBlock.scss'\r\n\r\nconst CodeCursorComponent = () => (\r\n  <span className=\"code-cursor\">_</span>\r\n)\r\n\r\nconst ResetButton = ({ handleReset }: { handleReset: () => void }) => {\r\n  const customHandleReset = (event: React.MouseEvent) => {\r\n    event.preventDefault()\r\n    handleReset()\r\n  }\r\n  return <span className=\"option-inline\" onClick={customHandleReset}>Reset contact \"form\"</span>\r\n}\r\n\r\nconst contactReasons = Object.freeze({\r\n  JOB: 'job.',\r\n  FREELANCE: 'freelance activities.',\r\n  HELLO: '...i have no question, just want to push this button.'\r\n})\r\n\r\nconst animatedTextHello: string = 'i have no question, just want to push this button.'\r\nconst animatedTextOther: string = 'i would like to contact you. I have some questions about your '\r\n\r\nconst ContactCodeBlock: React.FunctionComponent = () => {\r\n  const [ reason, setReason ] = useState<string>('')\r\n  const [ typed, setTyped ] = useState<string>('')\r\n\r\n  const handleReasonSelect = (event: React.MouseEvent) => {\r\n    event.preventDefault()\r\n    setTyped(reason === contactReasons.HELLO\r\n      ? animatedTextHello\r\n      : animatedTextOther)\r\n    clearInterval(animationHandlerInterval)\r\n    setReason(event.currentTarget.innerHTML)\r\n  }\r\n\r\n  const handleResetReason = () => setReason('')\r\n\r\n  let animationHandlerInterval: ReturnType<typeof setInterval>\r\n\r\n  useEffect(() => {\r\n    console.log('Reason changed')\r\n    if (reason === '') {\r\n      setTyped('')\r\n      let i = 0\r\n      animationHandlerInterval = setInterval(() => {\r\n        if (i < animatedTextOther.length) {\r\n          console.log('not equals, setTyped', animatedTextOther.substring(0, i + 1))\r\n          setTyped(animatedTextOther.substring(0, i + 1))\r\n          i++\r\n        } else {\r\n          console.log('clear')\r\n          clearInterval(animationHandlerInterval)\r\n        }\r\n      }, 65)\r\n    } else {\r\n      // selecting a reason stops typing animation\r\n      setTyped(reason === contactReasons.HELLO\r\n        ? animatedTextHello\r\n        : animatedTextOther)\r\n    }\r\n    return () => clearInterval(animationHandlerInterval)\r\n  }, [ reason ])\r\n\r\n  const renderAnswer = () => {\r\n    switch (reason) {\r\n      case contactReasons.JOB:\r\n        return (\r\n          <React.Fragment>\r\n            <br/>\r\n            {'>'} You can contact me at <a href={'https://www.linkedin.com/in/smokerigni/'}\r\n                                           target={'_blank'}>linkedin</a>.\r\n          </React.Fragment>\r\n        )\r\n      case contactReasons.FREELANCE:\r\n        return (\r\n          <React.Fragment>\r\n            <br/>\r\n            {'>'} Send me a message via <a href={'mailto:smokerigni@gmail.com'}>email</a>!\r\n          </React.Fragment>\r\n        )\r\n      case contactReasons.HELLO:\r\n        return (\r\n          <React.Fragment>\r\n            <br/>\r\n            {'>'} I know, this is a nice button. Treat it gently. ;)\r\n          </React.Fragment>\r\n        )\r\n      default:\r\n        return <React.Fragment/>\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"contact-code-block w-100 m-auto\">\r\n      <h2>Get in touch</h2>\r\n      <div className=\"code-styled p-3\">\r\n        Contact PowerShell<br/>\r\n        Copyright (C) Smokerigni. All rights reserved.<br/>\r\n        <br/>\r\n        PS Web:\\{'>'}get-in-touch -message=\"- Hi Ignác, <span>{typed}</span>\r\n        {reason === '' ? <CodeCursorComponent/> : (reason !== contactReasons.HELLO ? reason : '')}\"\r\n        {renderAnswer()}\r\n        <br/><br/>\r\n        {reason === ''\r\n          ? (\r\n            <div className=\"w-100 \">\r\n              {Object\r\n                .entries(contactReasons)\r\n                .map(([ key, value ], i) =>\r\n                  <span\r\n                    className=\"option-inline\"\r\n                    key={key}\r\n                    onClick={handleReasonSelect}>{value}</span>)}\r\n            </div>\r\n          )\r\n          : <ResetButton handleReset={handleResetReason}/>}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ContactCodeBlock\r\n","import './App.css'\nimport React from \"react\"\nimport ContactCodeBlock from \"./components/ContactCodeBlock/ContactCodeBlock\";\n\nconst App: React.FunctionComponent = () => {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row h-100 align-items-center justify-content-center\">\n        <div className=\"col-4\">\n          <h1>Hello.</h1>\n          <p>\n            My name is Ignác Török. Having eight years' experience\n            in structuring, I have acquired proficient web developing skills, both at developing and at implementing\n            interactive web services. My actual focus is the frontend with Reactjs.\n          </p>\n          <img className=\"d-block w-100\" src=\"/pexels-olia-danilevich-4974914.jpg\"/>\n        </div>\n      </div>\n      <div className=\"row h-100 align-items-center justify-content-center\">\n        <div className=\"col-4\">\n          <ContactCodeBlock/>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}